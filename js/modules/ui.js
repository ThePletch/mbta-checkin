// Generated by CoffeeScript 1.10.0
(function() {
  this.Ui = (function() {
    function Ui() {}

    Ui.modal = {
      selector: '#modal-info',
      wrapperSelector: '#modal-info-wrapper',
      slideTransitionMs: 500
    };

    Ui.maxAlertsCount = 10;

    Ui.alerts = [];

    Ui.statusIndicator = {
      selector: '#status-indicator',
      setStatus: function(status, tooltip) {
        var newImg;
        newImg = (function() {
          switch (status) {
            case 'loading':
              return Helpers.iconUrls.statusLoading;
            case 'error':
              return Helpers.iconUrls.statusError;
            case 'success':
              return Helpers.iconUrls.statusSuccess;
            default:
              return '?';
          }
        })();
        $(Ui.statusIndicator.selector).attr('src', newImg);
        return $(Ui.statusIndicator.selector).attr('title', tooltip || '');
      }
    };

    Ui.swipeHandler = {
      viewport: {
        selector: 'slide-pane'
      },
      modal: {
        selector: 'modal-info-wrapper'
      },
      slider: {
        selector: 'ui-slider'
      },
      leftArrow: {
        selector: 'larrow'
      },
      rightArrow: {
        selector: 'rarrow'
      },
      button: {
        size: 200,
        defaultIndex: 1
      },
      closeDropdownDurationMs: 150,
      refreshButtonPosition: function() {
        var handler, openDropdown, slideButtons, updateArrowDisplay;
        handler = Ui.swipeHandler;
        slideButtons = function() {
          $("#" + handler.slider.selector).css('margin-left', -1 * handler.button.index * handler.button.size);
          return updateArrowDisplay(handler.button.index);
        };
        updateArrowDisplay = function(index) {
          $("#" + handler.leftArrow.selector + ", #" + handler.rightArrow.selector).removeClass('hidden');
          if (index === 0) {
            $("#" + handler.leftArrow.selector).addClass('hidden');
          }
          if (index === handler.button.count - 1) {
            return $("#" + handler.rightArrow.selector).addClass('hidden');
          }
        };
        openDropdown = $("#" + handler.slider.selector + " .ui-dropdown.open");
        if (openDropdown.length) {
          openDropdown.removeClass('open');
          return openDropdown.slideUp(handler.closeDropdownDurationMs, slideButtons);
        } else {
          return slideButtons();
        }
      },
      initialize: function() {
        var handler, modalSwiper, viewportSwiper;
        handler = Ui.swipeHandler;
        viewportSwiper = new Hammer(document.getElementById(handler.viewport.selector));
        viewportSwiper.get('swipe').set({
          direction: Hammer.DIRECTION_ALL
        });
        modalSwiper = new Hammer(document.getElementById(handler.modal.selector));
        handler._viewport = viewportSwiper;
        handler._modal = modalSwiper;
        handler.button.count = $("#" + handler.slider.selector + " .ui-element").length;
        handler.button.index = handler.button.defaultIndex;
        handler.refreshButtonPosition();
        viewportSwiper.on('swipeleft swiperight swipedown', function(e) {
          switch (e.type) {
            case 'swiperight':
              return handler.vSwipeRight();
            case 'swipeleft':
              return handler.vSwipeLeft();
            case 'swipedown':
              return refreshButtonPosition();
          }
        });
        modalSwiper.on('swiperight', function(e) {
          return handler.mSwipeRight();
        });
        $("#" + handler.rightArrow.selector).click(handler.vSwipeLeft);
        return $("#" + handler.leftArrow.selector).click(handler.vSwipeRight);
      },
      alert: function(direction) {
        switch (direction) {
          case 'left':
            return $("#" + Ui.swipeHandler.leftArrow.selector).addClass('alert');
          case 'right':
            return $("#" + Ui.swipeHandler.rightArrow.selector).addClass('alert');
        }
      },
      clearAlert: function(direction) {
        switch (direction) {
          case 'left':
            return $("#" + Ui.swipeHandler.leftArrow.selector).removeClass('alert');
          case 'right':
            return $("#" + Ui.swipeHandler.rightArrow.selector).removeClass('alert');
        }
      },
      mSwipeRight: function() {
        return Ui.closeElement('modal-info-wrapper', 'modal-closed');
      },
      vSwipeRight: function() {
        var handler;
        handler = Ui.swipeHandler;
        handler.button.index = Math.max(handler.button.index - 1, 0);
        return handler.refreshButtonPosition();
      },
      vSwipeLeft: function() {
        var handler;
        handler = Ui.swipeHandler;
        handler.button.index = Math.min(handler.button.index + 1, handler.button.count - 1);
        return handler.refreshButtonPosition();
      }
    };

    Ui.initialize = function() {
      Ui.bindButtons();
      Ui.bindToggles();
      Helpers.events.bind('mapper-mbta-alerts', Ui.displayAlerts);
      Helpers.events.bind('mapper-mbta-predictions', function(predictions) {
        return Ui.displayModal('prediction-info', predictions);
      });
      Helpers.events.bind('mbta-api-sent', function() {
        return Ui.statusIndicator.setStatus('loading');
      });
      Helpers.events.bind('mbta-api-completed', function() {
        return Ui.statusIndicator.setStatus('success');
      });
      Helpers.events.bind('mbta-api-error', function(error) {
        return Ui.statusIndicator.setStatus('error', error);
      });
      return Helpers.events.bind('ui-new-alert', function() {
        Ui.swipeHandler.alert('right');
        return $('#alerts').addClass('error');
      });
    };

    Ui.bindButtons = function() {
      var trainLines;
      $('#zoom-location').click(Ui.fetchUserLocation);
      trainLines = [
        {
          selector: '#update-blue',
          lineName: 'Blue Line',
          eventName: 'blue-updated'
        }, {
          selector: '#update-green',
          lineName: 'Green Line',
          eventName: 'green-updated'
        }, {
          selector: '#update-orange',
          lineName: 'Orange Line',
          eventName: 'orange-updated'
        }, {
          selector: '#update-red',
          lineName: 'Red Line',
          eventName: 'red-updated'
        }
      ];
      _.each(trainLines, function(line) {
        return $(line.selector).click(function() {
          Mbta.updateVehicleLocations(jsonData.routes_by_line[line.lineName]);
          return Helpers.events.fire(line.eventName);
        });
      });
      $('#alerts').click(function() {
        $('#alerts').removeClass('error');
        Ui.swipeHandler.clearAlert('right');
        return Ui.displayModal('alerts', {
          alerts: Ui.alerts
        });
      });
      return Ui.swipeHandler.initialize();
    };

    Ui.bindToggles = function() {
      $('[data-toggle]').click(function() {
        var jqTarget, target;
        target = $(this).attr('data-toggle');
        jqTarget = $("#" + target);
        jqTarget.slideToggle();
        return jqTarget.toggleClass('open');
      });
      return $('[data-close]').click(function() {
        var eventName, jqThis, target;
        jqThis = $(this);
        target = $(this).attr('data-close');
        eventName = $(this).attr('data-close-event');
        return Ui.closeElement(target, eventName);
      });
    };

    Ui.bindModalButtons = function() {
      return $('.track-route').click(function() {
        var routeId;
        routeId = $(this).attr('data-route-id');
        return Mbta.updateVehicleLocations([routeId]);
      });
    };

    Ui.closeElement = function(target, eventName) {
      $("#" + target).removeClass('visible');
      return Helpers.events.fire(eventName);
    };

    Ui.displayAlert = function(alertText, isWarning) {
      if (Ui.alertAlreadyDisplayed(alertText)) {
        return false;
      }
      Ui.alerts.unshift(new Alert(alertText));
      if (Ui.alerts.length > Ui.maxAlertsCount) {
        Ui.alerts.pop();
      }
      return Helpers.events.fire('ui-new-alert');
    };

    Ui.displayAlerts = function(alerts) {
      return _.map(alerts, Ui.displayAlert);
    };

    Ui.alertAlreadyDisplayed = function(alertText) {
      return !!_.find(Ui.alerts, function(alert) {
        return alert.equals(alertText);
      });
    };

    Ui.displayModal = function(templateName, dataObject) {
      $(Ui.modal.wrapperSelector).removeClass('visible');
      return setTimeout((function() {
        var templateMarkup;
        templateMarkup = templates[templateName].render(dataObject);
        $(Ui.modal.selector).html(templateMarkup);
        $(Ui.modal.wrapperSelector).addClass('visible');
        return Ui.bindModalButtons();
      }), Ui.modal.slideTransitionMs);
    };

    Ui.fetchUserLocation = function() {
      return App.getUserLocation(function(location) {
        return Helpers.events.fire('ui-location-found', location);
      });
    };

    return Ui;

  })();

}).call(this);
