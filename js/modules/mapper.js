// Generated by CoffeeScript 1.10.0
(function() {
  this.Mapper = (function() {
    function Mapper() {}

    Mapper.map = null;

    Mapper.defaultStops = [];

    Mapper.defaultRouteIds = ["741", "742", "746", "749", "751", "Green-B", "Green-C", "Green-D", "Green-E", "Red", "Blue", "Orange"];

    Mapper.defaultStopIds = [];

    Mapper.center = {
      lat: 42.358,
      lng: -71.064
    };

    Mapper.selected = null;

    Mapper.zoom = 14;

    Mapper.featureManager = {
      _features: {},
      addFeature: function(key, feature) {
        Mapper.featureManager.destroyFeature(key);
        Mapper.featureManager._features[key] = feature;
        return Mapper.featureManager.renderFeature(key);
      },
      getFeature: function(key) {
        return Mapper.featureManager._features[key];
      },
      destroyFeature: function(key) {
        var feature, j, len, results, subfeature;
        if (!Mapper.featureManager._features[key]) {
          return;
        }
        feature = Mapper.featureManager._features[key];
        if (feature.constructor === Array) {
          console.log("Destroying " + feature.length + " objects");
          results = [];
          for (j = 0, len = feature.length; j < len; j++) {
            subfeature = feature[j];
            results.push(subfeature.destroy());
          }
          return results;
        } else {
          return feature.destroy();
        }
      },
      renderFeature: function(key) {
        var feature;
        if (!Mapper.featureManager._features[key]) {
          return;
        }
        feature = Mapper.featureManager._features[key];
        if (feature.constructor === Array) {
          console.log("Rendering " + feature.length + " objects");
          return feature.forEach(function(subfeature) {
            return subfeature.render();
          });
        } else {
          return feature.render();
        }
      }
    };

    Mapper.initialize = function() {
      Mapper.map = new google.maps.Map(document.getElementById('viewport'), {
        center: Mapper.center,
        zoom: Mapper.zoom,
        styles: jsonData.google_style,
        backgroundColor: '#2a2a2a',
        disableDefaultUI: true
      });
      Mapper.featureManager.addFeature('defaultRoutes', Mapper.defaultRouteIds.map(function(routeId) {
        var route;
        route = jsonData.routes[routeId];
        return new Route(route.id, route.name, route.mode);
      }));
      Mapper.defaultStopIds = jsonData.default_stops;
      Mapper.featureManager.addFeature('defaultStops', Mapper.defaultStopIds.map(function(stopId) {
        var stop;
        stop = jsonData.stops[stopId];
        return new Stop(stop.id, stop.name, stop.lat, stop.lon, "Bus");
      }));
      Helpers.events.bind('modal-closed', Mapper.removeSelected);
      Helpers.events.bind('ui-location-found', function(coords) {
        Mapper.featureManager.addFeature('userLocation', new LocationMarker(coords));
        Mapper.zoomToLocation(coords);
        return Mbta.getNearbyStops(coords, {
          success: function(stops) {
            return Mapper.featureManager.addFeature('localStops', stops);
          },
          error: console.error
        });
      });
      Helpers.events.bind('stop-selected', Mapper.markStopSelected);
      Helpers.events.bind('stop-fetchdata-success', function() {
        return Mapper.markSelectedStopState('success');
      });
      return Helpers.events.bind('stop-fetchdata-error', function() {
        return Mapper.markSelectedStopState('error');
      });
    };

    Mapper.markSelectedStopState = function(state) {
      var currentIcon;
      currentIcon = Mapper.selected.getIcon();
      currentIcon.url = (function() {
        switch (state) {
          case 'error':
            return Helpers.iconUrls.selectedError;
          case 'success':
            return Helpers.iconUrls.selectedSuccess;
        }
      })();
      return Mapper.selected.setIcon(currentIcon);
    };

    Mapper.markStopSelected = function(marker) {
      if (Mapper.selected != null) {
        Mapper.removeSelected();
      }
      return Mapper.selected = new google.maps.Marker({
        position: new google.maps.LatLng(marker.lat, marker.lng),
        map: Mapper.map,
        icon: {
          url: Helpers.iconUrls.selected,
          scaledSize: new google.maps.Size(33, 33),
          anchor: new google.maps.Point(16, 16)
        }
      });
    };

    Mapper.placeMarker = function(lat, lon, title, icon) {
      return new google.maps.Marker({
        position: new google.maps.LatLng(lat, lon),
        map: Mapper.map,
        title: title,
        icon: icon
      });
    };

    Mapper.placeLocationMarker = function(coords) {
      return Mapper.placeMarker(coords.latitude, coords.longitude, "Location", Helpers.getIcon({
        line: "Location"
      }));
    };

    Mapper.placeVehicleMarker = function(marker) {
      return Mapper.placeMarker(marker.lat, marker.lng, marker.destination, marker.icon || Helpers.getLiveIcon(marker));
    };

    Mapper.placeStopMarker = function(marker) {
      var gMarker;
      gMarker = Mapper.placeMarker(marker.lat, marker.lng, marker.name, marker.icon || Helpers.getIcon(marker));
      google.maps.event.addListener(gMarker, 'click', function() {
        return Mapper.click.stopMarker(marker);
      });
      return gMarker;
    };

    Mapper.placeStopMarkers = function(markers, extractor) {
      if (extractor == null) {
        extractor = function(marker) {
          return marker;
        };
      }
      return $.each(markers, function(i, marker) {
        return Mapper.placeStopMarker(extractor(marker));
      });
    };

    Mapper.removeSelected = function() {
      Mapper.selected.setMap(null);
      return Mapper.selected = null;
    };

    Mapper.zoomToLocation = function(location) {
      Mapper.map.setCenter(new google.maps.LatLng(location.latitude, location.longitude));
      return Mapper.map.setZoom(16);
    };

    return Mapper;

  })();

}).call(this);
