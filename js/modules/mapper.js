// Generated by CoffeeScript 1.10.0
(function() {
  this.Mapper = (function() {
    function Mapper() {}

    Mapper.map = null;

    Mapper.center = {
      lat: 42.358,
      lng: -71.064
    };

    Mapper.selected = null;

    Mapper.zoom = 14;

    Mapper.click = {
      stopMarker: function(marker) {
        Mapper.markStopSelected(marker);
        return Mbta.getNextTrainsToStop(marker.id, {
          success: function(result) {
            var dir, lastTrip, mode, nextTrip, predictionData, route;
            Helpers.events.fire('mapper-mbta-alerts', result.alert_headers.map(function(a) {
              return a.header_text;
            }));
            predictionData = {
              name: result.stop_name,
              modes: (function() {
                var i, len, ref, results;
                ref = result.mode;
                results = [];
                for (i = 0, len = ref.length; i < len; i++) {
                  mode = ref[i];
                  results.push({
                    routes: (function() {
                      var j, len1, ref1, results1;
                      ref1 = mode.route;
                      results1 = [];
                      for (j = 0, len1 = ref1.length; j < len1; j++) {
                        route = ref1[j];
                        results1.push({
                          routeName: route.route_name + " (" + route.direction[0].trip[0].trip_headsign + ")",
                          directions: (function() {
                            var k, len2, ref2, results2;
                            ref2 = route.direction;
                            results2 = [];
                            for (k = 0, len2 = ref2.length; k < len2; k++) {
                              dir = ref2[k];
                              nextTrip = _.min(dir.trip, function(trip) {
                                return parseInt(trip.pre_dt);
                              });
                              lastTrip = _.max(dir.trip, function(trip) {
                                return parseInt(trip.pre_dt);
                              });
                              results2.push({
                                name: dir.direction_name,
                                nextTrip: nextTrip,
                                timeBetweenTrains: Helpers.timeBetweenTrains(parseInt(lastTrip.pre_dt) - parseInt(nextTrip.pre_dt), dir.trip.length, Helpers.vehicleName(mode.mode_name)),
                                predictStr: Helpers.dateToTime(new Date(parseInt(nextTrip.pre_dt) * 1000)),
                                awayStr: Helpers.secondsToTimeString(parseInt(nextTrip.pre_away))
                              });
                            }
                            return results2;
                          })()
                        });
                      }
                      return results1;
                    })()
                  });
                }
                return results;
              })()
            };
            Helpers.events.fire('mapper-mbta-predictions', predictionData);
            return Mapper.markSelectedStopState('success');
          },
          error: function(error) {
            return Mapper.markSelectedStopState('error');
          }
        });
      }
    };

    Mapper.initialize = function() {
      Mapper.map = new google.maps.Map(document.getElementById('viewport'), {
        center: Mapper.center,
        zoom: Mapper.zoom,
        styles: jsonData.google_style,
        backgroundColor: '#2a2a2a',
        disableDefaultUI: true
      });
      Helpers.events.bind('modal-closed', Mapper.removeSelected);
      Helpers.events.bind('ui-location-found', Mapper.zoomToLocation);
      Mapper.placeStopMarkers(jsonData.all_stops);
      return Mapper.drawLineShapes();
    };

    Mapper.drawLineShapes = function() {
      return $.get("shapes/route_shapes.json", function(data) {
        var i, len, results, route, routes, shape;
        routes = typeof data === 'string' ? JSON.parse(data) : data;
        results = [];
        for (i = 0, len = routes.length; i < len; i++) {
          route = routes[i];
          results.push((function() {
            var j, len1, ref, results1;
            ref = route.shapes;
            results1 = [];
            for (j = 0, len1 = ref.length; j < len1; j++) {
              shape = ref[j];
              results1.push(Mapper.mapShapeFromLatLonList(shape, "#" + route.color));
            }
            return results1;
          })());
        }
        return results;
      });
    };

    Mapper.mapShapeFromLatLonList = function(latLonList, color) {
      var path, polyPoints;
      polyPoints = _.map(latLonList, function(point) {
        return {
          lat: point.lat,
          lng: point.lon
        };
      });
      path = new google.maps.Polyline({
        path: polyPoints,
        strokeColor: color,
        strokeOpacity: 1.0,
        strokeWeight: 5
      });
      return path.setMap(Mapper.map);
    };

    Mapper.markSelectedStopState = function(state) {
      var currentIcon;
      currentIcon = Mapper.selected.getIcon();
      currentIcon.url = (function() {
        switch (state) {
          case 'error':
            return Helpers.iconUrls.selectedError;
          case 'success':
            return Helpers.iconUrls.selectedSuccess;
        }
      })();
      return Mapper.selected.setIcon(currentIcon);
    };

    Mapper.markStopSelected = function(marker) {
      if (Mapper.selected != null) {
        Mapper.removeSelected();
      }
      return Mapper.selected = new google.maps.Marker({
        position: new google.maps.LatLng(marker.lat, marker.lng),
        map: Mapper.map,
        icon: {
          url: Helpers.iconUrls.selected,
          scaledSize: new google.maps.Size(33, 33),
          anchor: new google.maps.Point(16, 16)
        }
      });
    };

    Mapper.placeVehicleMarker = function(marker) {
      return new google.maps.Marker({
        position: new google.maps.LatLng(marker.lat, marker.lng),
        map: Mapper.map,
        title: marker.destination,
        icon: marker.icon || Helpers.getLiveIcon(marker)
      });
    };

    Mapper.placeStopMarker = function(marker) {
      var gMarker;
      gMarker = new google.maps.Marker({
        position: new google.maps.LatLng(marker.lat, marker.lng),
        map: Mapper.map,
        title: marker.name,
        icon: marker.icon || Helpers.getIcon(marker)
      });
      google.maps.event.addListener(gMarker, 'click', function() {
        return Mapper.click.stopMarker(marker);
      });
      return gMarker;
    };

    Mapper.placeStopMarkers = function(markers, extractor) {
      var i, len, marker, results;
      if (extractor == null) {
        extractor = function(marker) {
          return marker;
        };
      }
      results = [];
      for (i = 0, len = markers.length; i < len; i++) {
        marker = markers[i];
        results.push(Mapper.placeStopMarker(extractor(marker)));
      }
      return results;
    };

    Mapper.removeSelected = function() {
      var ref;
      if ((ref = Mapper.selected) != null) {
        ref.setMap(null);
      }
      return Mapper.selected = null;
    };

    Mapper.zoomToLocation = function(location) {
      Mapper.map.setCenter(new google.maps.LatLng(location.latitude, location.longitude));
      return Mapper.map.setZoom(16);
    };

    return Mapper;

  })();

}).call(this);
