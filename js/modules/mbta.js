// Generated by CoffeeScript 1.10.0
(function() {
  var indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  this.Mbta = (function() {
    function Mbta() {}

    Mbta.apiUrl = 'https://api-v3.mbta.com/';

    Mbta.userLocMarker = null;

    Mbta.localStops = [];

    Mbta.trainLocations = {};

    Mbta.makeApiRequest = function(path, additionalParams, callbacks, triggerStatusEvents) {
      var key, params, val;
      params = {
        api_key: '5b1ca80157b74611857c912337044985'
      };
      if (additionalParams == null) {
        additionalParams = {};
      }
      if (triggerStatusEvents == null) {
        triggerStatusEvents = true;
      }
      for (key in additionalParams) {
        val = additionalParams[key];
        params[key] = val;
      }
      if (triggerStatusEvents) {
        Helpers.events.fire('mbta-api-sent');
      }
      return $.ajax(Mbta.apiUrl + path, {
        data: params,
        success: function(data) {
          if (triggerStatusEvents) {
            Helpers.events.fire('mbta-api-completed', data);
          }
          return callbacks.success(data);
        },
        error: function(xhr, status, thrown) {
          if (triggerStatusEvents) {
            Helpers.events.fire('mbta-api-error', thrown);
          }
          return typeof callbacks.error === "function" ? callbacks.error(thrown) : void 0;
        }
      });
    };

    Mbta.initialize = function() {};

    Mbta.getStopsByLocation = function(lat, lon, callbacks) {
      return Mbta.makeApiRequest('stops', {
        filter: {
          latitude: lat,
          longitude: lon
        }
      }, callbacks);
    };

    Mbta.getNearbyStops = function(coords, callbacks) {
      return Mbta.getStopsByLocation(coords.latitude, coords.longitude, {
        success: function(result) {
          return callbacks.success(result.data.filter(function(stop) {
            return !Stop.isMainStop(stop.id, stop.relationships.parent_station);
          }).map(function(stop) {
            return Stop.fromRawApi(stop);
          }));
        },
        error: callbacks.error
      });
    };

    Mbta.getRoute = function(routeId, callbacks) {
      return Mbta.makeApiRequest('routes/' + routeId, {}, callbacks);
    };

    Mbta.getRoutesByStop = function(stop, callbacks) {
      return Mbta.makeApiRequest('routes', {
        filter: {
          stop: stop.id
        }
      }, callbacks);
    };

    Mbta.getStopsByRoute = function(route, callbacks) {
      return Mbta.makeApiRequest('stops', {
        filter: {
          route: route.id
        }
      }, callbacks);
    };

    Mbta.getTrainsByRoute = function(route, callbacks) {
      return Mbta.makeApiRequest('vehicles', {
        filter: {
          route: route.id
        },
        include: 'trip'
      }, {
        success: function(routeInfo) {
          return callbacks.success(routeInfo.data.map(function(trainData) {
            var train, trip;
            trip = _.findWhere(routeInfo.included, {
              id: trainData.relationships.trip.data.id
            });
            train = trainData.attributes;
            return new LiveTrain(train.label, route, trip.headsign, train.latitude, train.longitude, train.bearing);
          }));
        },
        error: callbacks.error
      }, false);
    };

    Mbta.getNextTrainsToStop = function(stop, callbacks) {
      var routeDirectionName, routeInfoBlock;
      routeInfoBlock = function(id, inclusions) {
        var apiInfo;
        apiInfo = _.findWhere(inclusions, {
          id: id
        });
        return {
          name: _.compact([apiInfo.attributes.short_name, apiInfo.attributes.long_name]).join(' - '),
          vehicleName: Helpers.vehicleName(apiInfo.attributes.description),
          directions: {}
        };
      };
      routeDirectionName = function(id, directionId, inclusions) {
        return _.findWhere(inclusions, {
          id: id,
          type: 'route'
        }).attributes.direction_names[directionId];
      };
      return Mbta.makeApiRequest('predictions', {
        filter: {
          stop: stop.id
        },
        include: 'route'
      }, {
        success: function(result) {
          var resultsByRoute;
          console.log(result);
          resultsByRoute = {};
          result.data.forEach(function(datum) {
            var base, directionId, prediction, routeId;
            prediction = new Date(datum.attributes.arrival_time);
            routeId = datum.relationships.route.data.id;
            directionId = datum.attributes.direction_id;
            resultsByRoute[routeId] || (resultsByRoute[routeId] = routeInfoBlock(routeId, result.included));
            (base = resultsByRoute[routeId].directions)[directionId] || (base[directionId] = {
              name: routeDirectionName(routeId, directionId, result.included),
              predictions: []
            });
            return resultsByRoute[routeId].directions[datum.attributes.direction_id].predictions.push(prediction);
          });
          Helpers.events.fire('mbta-predictions-found', {
            stop_name: stop.name,
            predictions: resultsByRoute
          });
          return callbacks.success(resultsByRoute);
        },
        error: callbacks.error
      });
    };

    Mbta.updateVehicleLocations = function(route) {
      var renderRoute;
      renderRoute = function() {
        var ref;
        if (ref = route.id, indexOf.call(Mapper.defaultRouteIds, ref) >= 0) {
          return Mapper.featureManager.destroyFeature('traced-route');
        } else {
          return Mapper.featureManager.addFeature('traced-route', route);
        }
      };
      Helpers.events.fire('mbta-api-sent');
      return Mbta.getTrainsByRoute(route, {
        success: function(trains) {
          route.setVehicles(trains);
          renderRoute();
          return Helpers.events.fire('mbta-api-completed');
        },
        error: function() {
          console.warn("Failed to fetch trains for route " + route.name + ".");
          return Helpers.events.fire('mbta-api-error', 'Could not fetch train locations.');
        }
      });
    };

    return Mbta;

  })();

}).call(this);
