// Generated by CoffeeScript 1.4.0
(function() {
  var __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  this.Mbta = (function() {

    function Mbta() {}

    Mbta.apiUrl = 'https://realtime.mbta.com/developer/api/v2/';

    Mbta.userLocMarker = null;

    Mbta.localStops = [];

    Mbta.trainLocations = {};

    Mbta.makeApiRequest = function(path, additionalParams, callbacks, triggerStatusEvents) {
      var key, params, val;
      params = {
        api_key: 'dHl1-NB5RUSVzujwXXlDZg'
      };
      if (additionalParams == null) {
        additionalParams = {};
      }
      if (triggerStatusEvents == null) {
        triggerStatusEvents = true;
      }
      for (key in additionalParams) {
        val = additionalParams[key];
        params[key] = val;
      }
      if (triggerStatusEvents) {
        Helpers.events.fire('mbta-api-sent');
      }
      return $.ajax(Mbta.apiUrl + path, {
        data: params,
        success: function(data) {
          if (triggerStatusEvents) {
            Helpers.events.fire('mbta-api-completed', data);
          }
          return callbacks.success(data);
        },
        error: function(xhr, status, thrown) {
          if (triggerStatusEvents) {
            Helpers.events.fire('mbta-api-error', thrown);
          }
          return typeof callbacks.error === "function" ? callbacks.error(thrown) : void 0;
        }
      });
    };

    Mbta.initialize = function() {};

    Mbta.getStopsByLocation = function(lat, lon, callbacks) {
      return Mbta.makeApiRequest('stopsbylocation', {
        lat: lat,
        lon: lon
      }, callbacks);
    };

    Mbta.getNearbyStops = function(coords, callbacks) {
      return Mbta.getStopsByLocation(coords.latitude, coords.longitude, {
        success: function(result) {
          return callbacks.success(result.stop.filter(function(stop) {
            return !Stop.isMainStop(stop.stop_id, stop.parent_station);
          }).map(function(stop) {
            return Stop.fromRawApi(stop);
          }));
        },
        error: callbacks.error
      });
    };

    Mbta.getRoutesByStop = function(stop, returnAsTemporary, callbacks) {
      var routeClass;
      if (Helpers.cache.routesForStop[stop.id]) {
        return callbacks.success(Helpers.cache.routesForStop[stop.id]);
      } else {
        routeClass = returnAsTemporary ? TemporaryRoute : Route;
        return Mbta.makeApiRequest('routesbystop', {
          stop: stop.id
        }, {
          success: function(result) {
            var routes;
            routes = [];
            result.mode.map(function(mode) {
              return routes = routes.concat(mode.route.map(function(route) {
                return new routeClass(route.route_id, route.route_name, mode.mode_name);
              }));
            });
            Helpers.cache.routesForStop[stop.id] = routes;
            return callbacks.success(routes);
          },
          error: callbacks.error
        });
      }
    };

    Mbta.getStopsByRoute = function(route, callbacks) {
      return Mbta.makeApiRequest('stopsbyroute', {
        route: route.id
      }, callbacks);
    };

    Mbta.getTrainsByRoute = function(route, callbacks) {
      return Mbta.makeApiRequest('vehiclesbyroute', {
        route: route.id
      }, {
        success: function(routeInfo) {
          return callbacks.success(_.flatten(routeInfo.direction.map(function(dir) {
            return dir.trip.map(function(trip) {
              var vehicle;
              vehicle = trip.vehicle;
              return new LiveTrain(vehicle.vehicle_id, route, trip.trip_headsign, vehicle.vehicle_lat, vehicle.vehicle_lon, vehicle.vehicle_bearing);
            });
          })));
        },
        error: callbacks.error
      }, false);
    };

    Mbta.getNextTrainsToStop = function(stop, callbacks) {
      var minutesBetweenVehicles;
      minutesBetweenVehicles = function(vehicles) {
        var lastTripScheduled, sumTimeBetween;
        sumTimeBetween = 0;
        lastTripScheduled = -1;
        vehicles.forEach(function(vehicle) {
          if (lastTripScheduled !== -1) {
            sumTimeBetween += parseInt(vehicle.pre_dt) - lastTripScheduled;
          } else {
            sumTimeBetween += parseInt(vehicle.pre_away);
          }
          return lastTripScheduled = parseInt(vehicle.pre_dt);
        });
        return Math.round((sumTimeBetween / vehicles.length) / 60);
      };
      return Mbta.makeApiRequest('predictionsbystop', {
        stop: stop.id
      }, {
        success: function(result) {
          var parsedResult;
          Helpers.events.fire('mbta-new-alerts', result.alert_headers.map(function(a) {
            return a.header_text;
          }));
          if (result.mode) {
            parsedResult = result.mode.map(function(mode) {
              return {
                type: mode.mode_name,
                vehicleName: Helpers.vehicleName(mode.mode_name),
                routes: mode.route.map(function(route) {
                  return {
                    self: Route.fromRawApi(route),
                    endStations: route.direction.map(function(dir) {
                      return dir.trip[0].trip_headsign;
                    }).join(" <-> "),
                    directions: route.direction.map(function(dir) {
                      return {
                        name: dir.direction_name,
                        trips: dir.trip,
                        minutesBetweenVehicles: minutesBetweenVehicles(dir.trip),
                        predictedNextArrival: new Date(parseInt(dir.trip[0].pre_dt) * 1000)
                      };
                    })
                  };
                })
              };
            });
            Helpers.events.fire('mbta-predictions-found', {
              stop_name: stop.name,
              predictions: parsedResult
            });
            return callbacks.success(parsedResult);
          } else {
            return callbacks.error(result);
          }
        },
        error: callbacks.error
      });
    };

    Mbta.updateVehicleLocations = function(route) {
      var renderRoute;
      renderRoute = function() {
        var _ref;
        if (_ref = route.id, __indexOf.call(Mapper.defaultRouteIds, _ref) >= 0) {
          return Mapper.featureManager.destroyFeature('traced-route');
        } else {
          return Mapper.featureManager.addFeature('traced-route', route);
        }
      };
      Helpers.events.fire('mbta-api-sent');
      return Mbta.getTrainsByRoute(route, {
        success: function(trains) {
          route.setVehicles(trains);
          renderRoute();
          return Helpers.events.fire('mbta-api-completed');
        },
        error: function() {
          console.warn("Failed to fetch trains for route " + route.name + ".");
          return Helpers.events.fire('mbta-api-error', 'Could not fetch train locations.');
        }
      });
    };

    return Mbta;

  })();

}).call(this);
