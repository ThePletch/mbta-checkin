// Generated by CoffeeScript 1.10.0
(function() {
  this.Mbta = (function() {
    function Mbta() {}

    Mbta.apiUrl = 'http://realtime.mbta.com/developer/api/v2/';

    Mbta.allStops = jsonData.all_stops;

    Mbta.trainLocations = {};

    Mbta.makeApiRequest = function(path, additionalParams, callbacks, triggerStatusEvents) {
      var key, params, val;
      params = {
        api_key: 'dHl1-NB5RUSVzujwXXlDZg'
      };
      if (additionalParams == null) {
        additionalParams = {};
      }
      if (triggerStatusEvents == null) {
        triggerStatusEvents = true;
      }
      for (key in additionalParams) {
        val = additionalParams[key];
        params[key] = val;
      }
      if (triggerStatusEvents) {
        Helpers.events.fire('mbta-api-sent');
      }
      return $.ajax(Mbta.apiUrl + path, {
        data: params,
        success: function(data) {
          if (triggerStatusEvents) {
            Helpers.events.fire('mbta-api-completed', data);
          }
          return callbacks.success(data);
        },
        error: function(xhr, status, thrown) {
          if (triggerStatusEvents) {
            Helpers.events.fire('mbta-api-error', thrown);
          }
          return typeof callbacks.error === "function" ? callbacks.error(thrown) : void 0;
        }
      });
    };

    Mbta.initialize = function() {};

    Mbta.getAllRoutes = function(callback) {
      return Mbta.makeApiRequest('routes', null, callback);
    };

    Mbta.getRouteByStop = function(stopName, callbacks) {
      return Mbta.makeApiRequest('routesbystop', {
        stop: stopName
      }, callbacks);
    };

    Mbta.getStopsByRoute = function(routeName, callbacks) {
      return Mbta.makeApiRequest('stopsbyroute', {
        route: routeName
      }, callbacks);
    };

    Mbta.getStopsByLocation = function(lat, lon, callbacks) {
      return Mbta.makeApiRequest('stopsbylocation', {
        lat: lat,
        lon: lon
      }, callbacks);
    };

    Mbta.getTrainsByRoute = function(routeName, callbacks) {
      return Mbta.makeApiRequest('vehiclesbyroute', {
        route: routeName
      }, callbacks, false);
    };

    Mbta.getNextTrainsToStop = function(stop, callbacks) {
      return Mbta.makeApiRequest('predictionsbystop', {
        stop: stop
      }, callbacks);
    };

    Mbta.updateVehicleLocations = function(routes) {
      var atLeastOneSucceeded, trainsFound;
      trainsFound = [];
      Helpers.events.fire('mbta-api-sent');
      atLeastOneSucceeded = false;
      return async.map(routes, function(routeToCheck, callback) {
        return Mbta.getTrainsByRoute(routeToCheck, {
          success: function(route) {
            var dir, i, j, len, len1, ref, ref1, trip, vehicle;
            ref = route.direction;
            for (i = 0, len = ref.length; i < len; i++) {
              dir = ref[i];
              ref1 = dir.trip;
              for (j = 0, len1 = ref1.length; j < len1; j++) {
                trip = ref1[j];
                vehicle = trip.vehicle;
                trainsFound.push(new LiveTrain(vehicle.vehicle_id, route.route_name, trip.trip_headsign, vehicle.vehicle_lat, vehicle.vehicle_lon, vehicle.vehicle_bearing));
              }
            }
            atLeastOneSucceeded = true;
            return callback();
          },
          error: function() {
            console.log("DEBUG: Failed to fetch trains for route " + routeToCheck + ".");
            return callback();
          }
        });
      }, function() {
        var i, j, len, len1, ref, train;
        ref = Mbta.trainLocations;
        for (i = 0, len = ref.length; i < len; i++) {
          train = ref[i];
          train.remove();
        }
        for (j = 0, len1 = trainsFound.length; j < len1; j++) {
          train = trainsFound[j];
          train.placeOnMap();
        }
        Mbta.trainLocations = trainsFound;
        if (atLeastOneSucceeded) {
          return Helpers.events.fire('mbta-api-completed');
        } else {
          return Helpers.events.fire('mbta-api-error', 'Could not fetch train locations.');
        }
      });
    };

    return Mbta;

  })();

}).call(this);
