// Generated by CoffeeScript 1.10.0
(function() {
  Number.prototype.leftPad = function(len, padder) {
    var s;
    s = this.toString();
    if (padder == null) {
      padder = '0';
    }
    while (s.length < len) {
      s = padder + s;
    }
    return s;
  };

  this.Helpers = (function() {
    function Helpers() {}

    Helpers.events = {
      _ev: {},
      bind: function(eventName, func) {
        var base, self;
        self = Helpers.events;
        if ((base = self._ev)[eventName] == null) {
          base[eventName] = [];
        }
        return self._ev[eventName].push(func);
      },
      fire: function(eventName, params) {
        var func, i, len1, ref, results, self;
        self = Helpers.events;
        if (self._ev[eventName] == null) {
          return;
        }
        ref = self._ev[eventName];
        results = [];
        for (i = 0, len1 = ref.length; i < len1; i++) {
          func = ref[i];
          results.push(func(params));
        }
        return results;
      }
    };

    Helpers.iconUrls = {
      red: 'img/red_line.png',
      green: 'img/green_line.png',
      blue: 'img/blue_line.png',
      orange: 'img/orange_line.png',
      redGreen: 'img/red_green_line.png',
      redOrange: 'img/red_orange_line.png',
      orangeBlue: '',
      blueGreen: 'img/green_blue_line.png',
      orangeGreen: 'img/orange_green_line.png',
      selected: 'img/selected.png',
      selectedError: 'img/selected_error.png',
      selectedSuccess: 'img/selected_success.png',
      statusLoading: 'img/spinner.gif',
      statusSuccess: 'img/success.png',
      statusError: 'img/error.png'
    };

    Helpers.lineColors = {
      red: '#ff0000',
      green: '#00ff00',
      blue: '#0077cc',
      orange: '#ff8800',
      bus: '#ffd700'
    };

    Helpers.getLineColor = function(lineColor) {
      switch (lineColor) {
        case 'Green Line':
        case 'Green Line B':
        case 'Green Line C':
        case 'Green Line D':
        case 'Green Line E':
          return Helpers.lineColors.green;
        case 'Orange Line':
          return Helpers.lineColors.orange;
        case 'Blue Line':
          return Helpers.lineColors.blue;
        case 'Red Line':
        case 'Mattapan Trolley':
          return Helpers.lineColors.red;
        default:
          return Helpers.lineColors.bus;
      }
    };

    Helpers.getLineIcon = function(lineColor) {
      switch (lineColor) {
        case 'Green Line':
        case 'Green Line B':
        case 'Green Line C':
        case 'Green Line D':
        case 'Green Line E':
          return Helpers.iconUrls.green;
        case 'Orange Line':
          return Helpers.iconUrls.orange;
        case 'Blue Line':
          return Helpers.iconUrls.blue;
        case 'Red Line':
        case 'Mattapan Trolley':
          return Helpers.iconUrls.red;
      }
    };

    Helpers.getLiveIcon = function(train) {
      return {
        path: google.maps.SymbolPath.FORWARD_CLOSED_ARROW,
        fillColor: Helpers.getLineColor(train.line),
        fillOpacity: 1,
        rotation: train.bearing,
        scale: 4,
        strokeWeight: 1
      };
    };

    Helpers.getIcon = function(icon) {
      return {
        scaledSize: new google.maps.Size(24, 24),
        anchor: new google.maps.Point(12, 12),
        url: Helpers.getLineIcon(icon.line)
      };
    };

    Helpers.dateToTime = function(date) {
      var amPm, hours, minutes;
      hours = (date.getHours() - 1) % 12 + 1;
      minutes = date.getMinutes().leftPad(2);
      amPm = date.getHours() >= 12 ? 'pm' : 'am';
      return hours + ":" + minutes + " " + amPm;
    };

    Helpers.secondsToTimeString = function(time) {
      var minutes;
      minutes = Math.floor(time / 60);
      if (minutes > 0) {
        return minutes + ' mins';
      } else {
        return 'Arr';
      }
    };

    Helpers.vehicleName = function(modeName) {
      var vehicleNameMap;
      vehicleNameMap = {
        'Subway': 'trains',
        'Bus': 'buses',
        'Commuter Rail': 'trains'
      };
      return vehicleNameMap[modeName];
    };

    return Helpers;

  })();

  this.Template = (function() {
    function Template(name, compiledCallback) {
      var setCompiledData;
      this.compiled = false;
      this._template = null;
      setCompiledData = (function(_this) {
        return function(data) {
          _this._template = data;
          return _this.compiled = true;
        };
      })(this);
      $.get("hb/" + name + ".hdbs", function(data) {
        setCompiledData(Handlebars.compile(data));
        return compiledCallback();
      });
    }

    Template.prototype.render = function(context) {
      return this.compiled && this._template(context);
    };

    return Template;

  })();

  this.Stop = (function() {
    function Stop(lat1, lng1, name1, directions) {
      this.lat = lat1;
      this.lng = lng1;
      this.name = name1;
      this.directions = directions || {};
    }

    Stop.prototype.getIcon = function() {
      return Helpers.getIcon(this);
    };

    return Stop;

  })();

  this.Direction = (function() {
    function Direction(name1, substops) {
      this.name = name1;
      this.substops = substops || [];
    }

    return Direction;

  })();

  this.Substop = (function() {
    function Substop(id, name1, line) {
      this.id = id;
      this.name = name1;
      this.line = line;
    }

    return Substop;

  })();

  this.Train = (function() {
    function Train(name1, eta, etaString) {
      this.name = name1;
      this.eta = eta;
      this.etaString = etaString;
    }

    return Train;

  })();

  this.LiveTrain = (function() {
    function LiveTrain(id, line, destination, lat, lng, bearing) {
      this.id = id;
      this.line = line;
      this.destination = destination;
      this.lat = parseFloat(lat);
      this.lng = parseFloat(lng);
      this.bearing = parseInt(bearing);
    }

    LiveTrain.prototype.placeOnMap = function() {
      return this.marker = Mapper.placeVehicleMarker(this);
    };

    LiveTrain.prototype.remove = function() {
      var ref;
      if ((ref = this.marker) != null) {
        ref.setMap(null);
      }
      return this.marker = null;
    };

    return LiveTrain;

  })();

  this.Alert = (function() {
    function Alert(text1) {
      this.text = text1;
      this.timestamp = new Date();
    }

    Alert.prototype.matches = function(text) {
      return this.text === text;
    };

    Alert.prototype.equals = function(thing) {
      return this === thing || this.matches(thing);
    };

    return Alert;

  })();

  window.templates = {};

  window.jsonData = {};

  $(function() {
    var compileTemplates, loadJson;
    compileTemplates = function(compiledCallback) {
      return async.map(['prediction-info', 'alerts'], function(templateName, callback) {
        return window.templates[templateName] = new Template(templateName, callback);
      }, function(error, success) {
        if (error) {
          return compiledCallback("FATAL: Could not load templates. " + error);
        } else {
          Helpers.events.fire('templates-rendered');
          return compiledCallback();
        }
      });
    };
    loadJson = function(loadedCallback) {
      return async.map(['all_stops', 'google_style', 'route_coordinates', 'routes_by_line'], function(jsonName, callback) {
        return $.get("js/json/" + jsonName + ".json", function(data) {
          var ref;
          if ((ref = typeof data) === String || ref === 'string') {
            data = JSON.parse(data);
          }
          window.jsonData[jsonName] = data;
          return callback();
        });
      }, function(error, success) {
        if (error) {
          console.log("Shiiiiiit", error);
          return loadedCallback("FATAL: Could not load JSON. " + error);
        } else {
          Helpers.events.fire('json-loaded');
          return loadedCallback();
        }
      });
    };
    return async.map([loadJson, compileTemplates], function(prepFunction, callback) {
      console.log(prepFunction);
      return prepFunction(callback);
    }, function(error, success) {
      if (error) {
        return console.log(error);
      } else {
        return Helpers.events.fire('prep-complete');
      }
    });
  });

}).call(this);
